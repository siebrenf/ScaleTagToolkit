manifest {
  name        = 'ScaleTagToolkit'
  version     = 1.1
  description = 'ScaleBio Seq Suite: Tagmentation Toolkit workflow'
  homePage = 'https://scale.bio'
}

//// Parameter defaults; Can be set at workflow runtime on the nextflow command-line
// See nextflow_schema.json for description
params {
    help = false
    show_hidden_params = false
    
    //// Sequencing data input.
    // Either a runfolder (BCL) or a directory with fastq files is required!
    runFolder = null
    fastqDir = null 
    fastqSamplesheet = null // Optional
    
    //// Sample information (required!)
    samples = null

    //// Reference genome.json (required!)
    genome = null

    //// Library structure (barcode locations and sequences).
    // Can be absolute paths or relative to ${projectDir}/references/
    libStructure = "lib-atacUniversal-a.json"

    //// Workflow outputs (sub-directory of workflow launch dir)
    outDir = "out"

    //// Optional workflow parameters
    trimFastq = true
    adapter = "CTGTCTCTTATACACATCT"
    peaks = null 
    subsample = false
    fastqc = true
    splitMerge = false

    //// Downstream analysis and reporting
    generateReport = true
    qcAndArchRParams="$projectDir/references/parameters/qcAndArchR.yml"
    runArchR = false
    archrCondaEnv=null

    //// Max. resources that can be requested for a single job
    max_memory = "30.GB"
    max_cpus = 32
}

process {
    errorStrategy = 'retry'
    maxRetries = 1

    cpus = { max_cpu(2) }
    memory = { max_mem(4.GB * task.attempt) }
    time = 48.h

    container = "felixschlesinger/scaleatac@sha256:c1b309600bead3791692d88c56905aa15a0f843c649ab8a8f4d93017e8f4c61c"

    withLabel: small {
        cpus = 1
        memory = { max_mem(2.GB * task.attempt) }
}
    withName:bclconvert {
        container = 'felixschlesinger/bclconvert'
        cpus = { max_cpu(24) }
        memory = { max_mem(24.GB * task.attempt) }
    }
    withName:fastqc {
        container = 'biocontainers/fastqc:v0.11.9_cv8'
    }
    withName:trimFq {
	    cpus = { max_cpu(4) }
	    memory = { max_mem(2.GB * task.attempt) }
    }
    withName:barcodeDemux {
        cpus = { max_cpu(10) }
        memory = { max_mem(8.GB * task.attempt) }
    }
    withName:align {
        cpus = { max_cpu(16) }
        memory = { max_mem(16.GB * task.attempt) }
    }
    withName:dedup {
        cpus = { max_cpu(4) }
        memory = { max_mem(2.GB * task.attempt) }
    }
    withName:tagSites {
        cpus = { max_cpu(3) }
        memory = { max_mem(1.GB * task.attempt) }
    }
    withName:callPeaks {
        cpus = { max_cpu(4) }
        memory = { max_mem(16.GB * task.attempt) }
    }
    withName:cellFilter {
        container = "felixschlesinger/scalereport@sha256:5041ef7a5a9cd446bf0cfa987e02e62f65125f1090a40b40bb720d8a8f1fbd4e"
    }
    withName:sampleReport {
      container = "felixschlesinger/scalereport@sha256:5041ef7a5a9cd446bf0cfa987e02e62f65125f1090a40b40bb720d8a8f1fbd4e"
    }
    withName:libraryReport {
      container = "felixschlesinger/scalereport@sha256:5041ef7a5a9cd446bf0cfa987e02e62f65125f1090a40b40bb720d8a8f1fbd4e"
    }
    withName:archrAnalysis {
      memory = { max_mem(16.GB * task.attempt) }
      cpus = { max_cpu(4) }
      container = "felixschlesinger/sc_atac_analysis@sha256:f36c96a4308ba5b0b48a9f8ac547060e0fe31a0335040c7af827b97c345ed15b"
    }
}

profiles {
  conda {
    process {
      conda = "$projectDir/envs/scaleAtac.conda.yml"
      withName:cellFilter { conda = "$projectDir/envs/scalereport.conda.yml" }
      withName:sampleReport { conda = "$projectDir/envs/scalereport.conda.yml" }
      withName:libraryReport { conda = "$projectDir/envs/scalereport.conda.yml" }
      withName:archrAnalysis { conda = "$projectDir/envs/archr.conda.yml" }
    }
  }
  docker {
    // Shared settings for all container engines go here
    docker.enabled = true
  }
  singularity {
    singularity.enabled = true 
    singularity.autoMounts = true
    docker.enabled = false
  }
  podman {
    podman.enabled = true 
    docker.enabled = false
  }
}

// nf-core functions to ensure that resource requirements don't go 
// beyond a maximum limit
def max_mem(obj) {
    if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
    else
        return obj
}
def max_cpu(obj) {
    return Math.min(obj, params.max_cpus as int)
}
